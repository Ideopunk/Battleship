{"version":3,"sources":["viewport.js","Ship.js","Board.js","Announcements.js","computer.js","App.js","index.js"],"names":["convert","rect","mouseX","x","width","Ship","dragStart","e","percentArea","viewport","target","getBoundingClientRect","clientX","shipArea","Math","floor","props","hits","parts","length","shipObject","shipNumber","getAttribute","dataTransfer","setData","JSON","stringify","dragOver","stopPropagation","divs","this","map","hit","index","key","name","data-value","className","id","entrant","title","data-orientation","orientation","draggable","onDragStart","onDragOver","unselectable","user-select","sunk","onBoard","Component","Board","drop","preventDefault","parse","getData","Error","console","log","placeShip","Number","entrantNumber","boardHit","cellsDisplay","cells","cell","status","data-ship-number","data-ship-area","onClick","onDrop","ship","Announcements","messages","message","attack","lastCompAttack","coordinate","random","returnValue","temp","boardpoint","biglength","numb","App","initialState","participants","ships","board","Array","fill","undefined","gamestart","state","randomize","placeRandomShips","startCheck","placeRandomShip","multiplier","cellIndex","computer","cellArray","i","newCellIndex","push","distributeShip","transitionCellIndex","shipLength","entries","boardStateUpdate","boardArrayIndex","currentState","setState","playerTurnEnd","boardIndex","end","onBoardHit","computerAttackIndex","messageUpdate","onShipHit","some","part","toLowerCase","winCheck","otherEntrantNumber","find","reset","changeOrientation","newOrientation","newMessage","shift","onShipPlacement","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3f0bb89.chunk.js","sourcesContent":["const convert = (rect, mouseX) => {\n\tconst x = mouseX - rect.x;\n\treturn x / rect.width;\n};\n\nexport { convert };\n\n// All praise to @themetar for explaining the power of getBoundingClientRect() :)\n","import React, { Component } from \"react\";\nimport * as viewport from \"./viewport\";\nclass Ship extends Component {\n\tdragStart = (e) => {\n\t\tconst percentArea = viewport.convert(e.target.getBoundingClientRect(), e.clientX);\n\t\tconst shipArea = Math.floor(percentArea * this.props.hits.parts.length);\n\t\tconst shipObject = {\n\t\t\tshipNumber: e.target.getAttribute(\"data-value\"),\n\t\t\tshipArea,\n\t\t};\n\t\te.dataTransfer.setData(\"ship-data\", JSON.stringify(shipObject));\n\t};\n\n\tdragOver = (e) => {\n\t\te.stopPropagation();\n\t};\n\n\trender() {\n\t\tconst divs = this.props.hits.parts.map((hit, index) => (\n\t\t\t<div\n\t\t\t\tkey={index}\n\t\t\t\tname={index}\n\t\t\t\tdata-value={hit}\n\t\t\t\tclassName=\"ship-piece\"\n\t\t\t\tid={`${this.props.entrant}-${this.props.title}-${index}`}\n\t\t\t></div>\n\t\t));\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={`${this.props.entrant}-${this.props.title}`}\n\t\t\t\tname={this.props.title}\n\t\t\t\tdata-value={this.props.shipNumber}\n\t\t\t\tdata-orientation={this.props.orientation}\n\t\t\t\tdraggable={this.props.draggable}\n\t\t\t\tonDragStart={this.dragStart}\n\t\t\t\tonDragOver={this.dragOver}\n\t\t\t\tunselectable=\"on\"\n\t\t\t\tuser-select=\"none\"\n\t\t\t>\n\t\t\t\t<h3 className=\"piece-heading\">\n\t\t\t\t\t{this.props.orientation === \"horizontal\" && this.props.title}\n\t\t\t\t</h3>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`ship-div ${this.props.title} ${\n\t\t\t\t\t\tthis.props.sunk === true ? \"sunk\" : \"\"\n\t\t\t\t\t} ${this.props.orientation === \"vertical\" ? \"vertical\" : \"\"} ${\n\t\t\t\t\t\tthis.props.onBoard ? \"placed\" : \"\"\n\t\t\t\t\t} unselectable`}\n\t\t\t\t>\n\t\t\t\t\t{divs}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Ship;\n","import React, { Component } from \"react\";\n\nclass Board extends Component {\n\tdrop = (e) => {\n\t\te.preventDefault();\n\t\tconst { shipNumber, shipArea } = JSON.parse(e.dataTransfer.getData(\"ship-data\"));\n\t\ttry {\n\t\t\tif (!shipNumber || shipNumber === \"false\") {\n\n\t\t\t\tthrow new Error(`that's not a ship lol`);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.props.placeShip(\n\t\t\tshipNumber,\n\t\t\tNumber(e.target.getAttribute(\"name\")),\n\t\t\tthis.props.entrantNumber,\n\t\t\tshipArea\n\t\t);\n\t};\n\n\tdragOver = (e) => {\n\t\te.preventDefault();\n\t};\n\n\thit = (e) => {\n\t\t// Only works on computer board\n\t\tif (this.props.boardHit) {\n\t\t\tthis.props.boardHit(\n\t\t\t\te.target.getAttribute(\"name\") // index\n\t\t\t);\n\t\t}\n\t};\n\n\trender() {\n\t\tconst cells = this.props.cells;\n\t\tconst cellsDisplay = cells.map((cell, index) => (\n\t\t\t<div\n\t\t\t\tclassName={`cell ${cell.status}`}\n\t\t\t\tdata-value={cell.status}\n\t\t\t\tname={index}\n\t\t\t\tkey={index}\n\t\t\t\tdata-ship-number={cell.shipNumber}\n\t\t\t\tdata-ship-area={cell.shipArea}\n\t\t\t\tid={`${this.props.entrantNumber}-${index}`}\n\t\t\t\tonClick={this.hit}\n\t\t\t\tonDrop={this.drop}\n\t\t\t\tonDragOver={this.dragOver}\n\t\t\t>\n\t\t\t\t{this.props.ship || \"\"}\n\t\t\t</div>\n\t\t));\n\t\treturn (\n\t\t\t<div className=\"board\" id={`board-${this.props.entrantNumber}`}>\n\t\t\t\t{cellsDisplay}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\n\nclass Announcements extends Component {\n\n\trender() {\n\t\tconst messages = this.props.message.map((message, index) => <p key={index}>- {message}</p>);\n\n\t\treturn (\n\t\t\t<div id=\"announcements\" className=\"announcements\">\n\t\t\t\t{messages}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Announcements;\n","const attack = (lastCompAttack) => {\n\tconst { status, coordinate } = lastCompAttack;\n\tif (status === \"miss\") {\n\t\treturn Math.floor(Math.random() * 100);\n\t} else {\n\t\tconst temp = Math.floor(Math.random() * 45);\n\t\tlet returnValue;\n\t\tif (temp < 10) {\n\t\t\treturnValue = coordinate - 1;\n\t\t} else if (temp < 20) {\n\t\t\treturnValue = coordinate + 1;\n\t\t} else if (temp < 30) {\n\t\t\treturnValue = coordinate - 10;\n\t\t} else if (temp < 40) {\n\t\t\treturnValue = coordinate + 10;\n\t\t} else {\n\t\t\treturnValue = Math.floor(Math.random() * 100);\n\t\t}\n\n\t\t// Don't go off the board.\n\t\tif (returnValue < 0 || 99 < returnValue) {\n\t\t\treturnValue = Math.floor(Math.random() * 100);\n\t\t}\n\n\t\treturn returnValue;\n\t}\n};\n\nconst boardpoint = (length, orientation) => {\n\tif (orientation === \"vertical\") {\n\t\tconst biglength = length * 10;\n\t\treturn Math.floor(Math.random() * (100 - biglength));\n\t} else {\n\t\tlet numb = Math.floor(Math.random() * 100);\n\t\twhile (numb % 10 > 10 - length) {\n\t\t\tnumb = Math.floor(Math.random() * 100);\n\t\t}\n\t\treturn numb;\n\t}\n};\n\nexport { attack, boardpoint };\n","import React, { Component } from \"react\";\nimport Ship from \"./Ship\";\nimport Board from \"./Board\";\nimport Announcements from \"./Announcements\";\nimport \"./style/App.scss\";\nimport * as computer from \"./computer\";\n\nclass App extends Component {\n\tinitialState = {\n\t\tparticipants: [\n\t\t\t{\n\t\t\t\tships: [\n\t\t\t\t\t{ parts: [false, false, false, false, false], onBoard: false, name: \"Carrier\" },\n\t\t\t\t\t{ parts: [false, false, false, false], onBoard: false, name: \"Battleship\" },\n\t\t\t\t\t{ parts: [false, false, false], onBoard: false, name: \"Destroyer\" },\n\t\t\t\t\t{ parts: [false, false, false], onBoard: false, name: \"Submarine\" },\n\t\t\t\t\t{ parts: [false, false], onBoard: false, name: \"Patrol\" },\n\t\t\t\t],\n\t\t\t\tboard: new Array(100).fill({\n\t\t\t\t\tstatus: \"naw\",\n\t\t\t\t\tshipNumber: undefined,\n\t\t\t\t\tshipArea: undefined,\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{\n\t\t\t\tships: [\n\t\t\t\t\t{ parts: [false, false, false, false, false], onBoard: false, name: \"Carrier\" },\n\t\t\t\t\t{ parts: [false, false, false, false], onBoard: false, name: \"Battleship\" },\n\t\t\t\t\t{ parts: [false, false, false], onBoard: false, name: \"Destroyer\" },\n\t\t\t\t\t{ parts: [false, false, false], onBoard: false, name: \"Submarine\" },\n\t\t\t\t\t{ parts: [false, false], onBoard: false, name: \"Patrol\" },\n\t\t\t\t],\n\t\t\t\tboard: new Array(100).fill({\n\t\t\t\t\tstatus: \"naw\",\n\t\t\t\t\tshipNumber: undefined,\n\t\t\t\t\tshipArea: undefined,\n\t\t\t\t}),\n\t\t\t},\n\t\t],\n\t\torientation: \"horizontal\",\n\t\tgamestart: false,\n\t\tmessage: [\"Drag or randomize to begin...\"],\n\t\tlastCompAttack: {\n\t\t\tstatus: \"miss\",\n\t\t\tcoordinate: 0,\n\t\t},\n\t};\n\n\tstate = JSON.parse(JSON.stringify(this.initialState));\n\n\t// SHIP PLACEMENT STUFF\n\n\t// Computer ship placement\n\trandomize = () => {\n\t\tif (!this.state.gamestart) {\n\t\t\tthis.placeRandomShips(0);\n\t\t\tthis.startCheck();\n\t\t}\n\t};\n\n\tplaceRandomShip = (shipNumber, entrantNumber) => {\n\t\tconst ship = this.state.participants[entrantNumber].ships[shipNumber];\n\t\tconst length = ship.parts.length;\n\t\tconst orientation = Math.random() < 0.5 ? \"horizontal\" : \"vertical\";\n\t\tconst multiplier = orientation === \"horizontal\" ? 1 : 10;\n\t\tconst cellIndex = computer.boardpoint(length, orientation);\n\n\t\tlet cellArray = [];\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tlet newCellIndex = cellIndex + i * multiplier;\n\t\t\tif (this.state.participants[entrantNumber].board[newCellIndex].status === \"ship\") {\n\t\t\t\tcellArray = [];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcellArray.push(cellIndex + i * multiplier);\n\t\t}\n\n\t\treturn cellArray;\n\t};\n\n\tplaceRandomShips = (entrantNumber) => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tif (!this.state.participants[entrantNumber].ships[i].onBoard) {\n\t\t\t\tlet cellArray = [];\n\t\t\t\twhile (cellArray.length < 1) {\n\t\t\t\t\tcellArray = this.placeRandomShip(i, entrantNumber);\n\t\t\t\t}\n\t\t\t\tthis.distributeShip(cellArray, i, entrantNumber);\n\t\t\t}\n\t\t}\n\t};\n\n\t// human ship placement\n\tplaceShip = (shipNumber, cellIndex, entrantNumber, shipArea) => {\n\t\tlet cellArray = [];\n\t\tlet transitionCellIndex;\n\n\t\t// which ship is being placed? How long is it, and how are we currently oriented? \n\t\tconst ship = this.state.participants[entrantNumber].ships[shipNumber];\n\t\tconst shipLength = ship.parts.length;\n\t\tconst orientation = this.state.orientation;\n\n\t\tlet multiplier = orientation === \"horizontal\" ? 1 : 10;\n\n\t\t// move the ship depending on which part of the ship the player is dragging.\n\t\ttransitionCellIndex = cellIndex - shipArea * multiplier;\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < shipLength; i++) {\n\t\t\t\tlet newCellIndex = transitionCellIndex + i * multiplier;\n\t\t\t\tif (newCellIndex > 99) {\n\t\t\t\t\tthrow new Error(\"yr off the board\");\n\t\t\t\t}\n\t\t\t\tif (i > 0 && newCellIndex % 10 === 0) {\n\t\t\t\t\tthrow new Error(\"yr off the board\");\n\t\t\t\t}\n\t\t\t\tif (this.state.participants[entrantNumber].board[newCellIndex].status === \"ship\") {\n\t\t\t\t\tthrow new Error(\"yr on another ship bud\");\n\t\t\t\t}\n\t\t\t\tcellArray.push(transitionCellIndex + i * multiplier);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.distributeShip(cellArray, shipNumber, entrantNumber);\n\t\tthis.startCheck();\n\t};\n\n\tdistributeShip = (cellArray, shipNumber, entrantNumber) => {\n\t\tfor (let [index, cell] of cellArray.entries()) {\n\t\t\tthis.boardStateUpdate(cell, entrantNumber, shipNumber, index);\n\t\t}\n\t};\n\n\tboardStateUpdate = (boardArrayIndex, entrantNumber, shipNumber, shipArea) => {\n\t\tlet currentState = this.state;\n\n\t\tcurrentState.participants[entrantNumber].ships[shipNumber].onBoard = true;\n\t\tcurrentState.participants[entrantNumber].board[boardArrayIndex].status = \"ship\";\n\t\tcurrentState.participants[entrantNumber].board[boardArrayIndex].shipArea = shipArea;\n\t\tcurrentState.participants[entrantNumber].board[boardArrayIndex].shipNumber = shipNumber;\n\t\tthis.setState(currentState);\n\t};\n\n\t// TURN STUFF\n\n\t// have all of the pieces been placed? If so, the game can begin\n\tstartCheck() {\n\t\tif (!this.state.participants[0].ships.some((ship) => ship.onBoard === false)) {\n\t\t\tlet currentState = this.state;\n\t\t\tcurrentState.gamestart = true;\n\t\t\tthis.messageUpdate(\"The game begins!\");\n\t\t\tthis.setState(currentState);\n\t\t\tthis.placeRandomShips(1);\n\t\t}\n\t}\n\n\t// When the player clicks a cell on the opponent's board ( / makes an attack), the turn ends -- IF it was a clickable location. \n\t// The onBoardHit sequence is ran, and then again for a random location attacked by the computer.\n\tplayerTurnEnd = (boardIndex) => {\n\t\tlet status = this.state.participants[1].board[boardIndex].status;\n\t\ttry {\n\t\t\tif (status !== \"naw\" && status !== \"ship\") {\n\t\t\t\tthrow new Error(`you can't click there`);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn;\n\t\t}\n\n\t\t// if the win checks say it's over and has reset the board, then stop executing the code!\n\t\tlet end = this.onBoardHit(boardIndex, 1);\n\t\ttry {\n\t\t\tif (!end) {\n\t\t\t\tthrow new Error(\"It's over!\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn;\n\t\t}\n\n\t\t// get a good hit from the computer\n\t\tlet computerAttackIndex = computer.attack(this.state.lastCompAttack);\n\t\twhile (\n\t\t\tthis.state.participants[0].board[computerAttackIndex].status !== \"ship\" &&\n\t\t\tthis.state.participants[0].board[computerAttackIndex].status !== \"naw\"\n\t\t) {\n\t\t\tcomputerAttackIndex = computer.attack(this.state.lastCompAttack);\n\t\t}\n\n\t\t// if the win checks say it's over and has reset the board, then stop executing the code!\n\t\tend = this.onBoardHit(computerAttackIndex, 0);\n\t\ttry {\n\t\t\tif (!end) {\n\t\t\t\tthrow new Error(\"It's over!\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\treturn;\n\t\t}\n\t};\n\n\tonBoardHit = (boardIndex, entrantNumber) => {\n\t\tconst currentState = this.state;\n\t\tlet status = currentState.participants[entrantNumber].board[boardIndex].status\n\n\t\t// if attack misses\n\t\tif (status === \"naw\") {\n\t\t\tcurrentState.participants[entrantNumber].board[boardIndex].status = \"miss\";\n\t\t\tif (entrantNumber) {\n\t\t\t\tthis.messageUpdate(\"Your attack misses!\");\n\t\t\t} else {\n\t\t\t\tcurrentState.lastCompAttack = { status: \"miss\", coordinate: boardIndex };\n\t\t\t\tthis.messageUpdate(\"The computer's attack misses!\");\n\t\t\t}\n\t\t\treturn true;\n\n\t\t// if attack hits\n\t\t} else if (status === \"ship\") {\n\t\t\tcurrentState.participants[entrantNumber].board[boardIndex].status = \"hit\";\n\t\t\tif (entrantNumber) {\n\t\t\t\tthis.messageUpdate(\"Your attack hits!\");\n\t\t\t} else {\n\t\t\t\tcurrentState.lastCompAttack = { status: \"hit\", coordinate: boardIndex };\n\t\t\t\tthis.messageUpdate(\"The computer's attack hits!\");\n\t\t\t}\n\n\t\t\tconst {shipArea, shipNumber} = currentState.participants[entrantNumber].board[boardIndex]\n\t\t\t\n\t\t\tthis.setState(currentState);\n\t\t\tconst end = this.onShipHit(shipArea, shipNumber, entrantNumber);\n\t\t\treturn end;\n\t\t}\n\t};\n\n\t// based on ship being hit in UI / components, update ship in state.\n\tonShipHit = (shipArea, shipNumber, entrantNumber) => {\n\t\tlet currentState = this.state;\n\n\t\tcurrentState.participants[entrantNumber].ships[shipNumber].parts[shipArea] = true;\n\t\tif (\n\t\t\t!currentState.participants[entrantNumber].ships[shipNumber].parts.some(\n\t\t\t\t(part) => part === false\n\t\t\t)\n\t\t) {\n\t\t\tif (!entrantNumber) {\n\t\t\t\tthis.messageUpdate(\n\t\t\t\t\t`Your ${currentState.participants[entrantNumber].ships[\n\t\t\t\t\t\tshipNumber\n\t\t\t\t\t].name.toLowerCase()} has sunk!`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.messageUpdate(\n\t\t\t\t\t`The computer's ${currentState.participants[entrantNumber].ships[\n\t\t\t\t\t\tshipNumber\n\t\t\t\t\t].name.toLowerCase()} has sunk!`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis.setState(currentState);\n\t\tconst end = this.winCheck(entrantNumber);\n\t\treturn end;\n\t};\n\n\t// check if all the ships of an entrant have sunk. \n\twinCheck = (entrantNumber) => {\n\t\tlet otherEntrantNumber;\n\t\tif (entrantNumber === 0) {\n\t\t\totherEntrantNumber = 1;\n\t\t} else {\n\t\t\totherEntrantNumber = 0;\n\t\t}\n\t\tconst entrantShips = this.state.participants[entrantNumber].ships;\n\t\tconst falseFound = entrantShips.find((ship) => ship.parts.some((part) => part === false));\n\n\t\t// celebrate!\n\t\tif (!falseFound) {\n\t\t\tconst end = this.reset(otherEntrantNumber);\n\t\t\treturn end;\n\t\t}\n\t\treturn true;\n\t};\n\n\n\tchangeOrientation = () => {\n\t\tlet newOrientation;\n\t\tif (this.state.orientation === \"horizontal\") {\n\t\t\tnewOrientation = \"vertical\";\n\t\t} else {\n\t\t\tnewOrientation = \"horizontal\";\n\t\t}\n\t\tthis.setState({\n\t\t\torientation: newOrientation,\n\t\t});\n\t};\n\n\t// put board back to initial state, display a win-message if reset is triggered by a game win. \n\treset = (entrantNumber) => {\n\t\tlet currentState = JSON.parse(JSON.stringify(this.initialState));\n\t\tif (entrantNumber === 0) {\n\t\t\tcurrentState.message = [\"You win! You're a hero!\"];\n\t\t} else if (entrantNumber === 1) {\n\t\t\tcurrentState.message = [\"You lose! The computer is so smart!\"];\n\t\t}\n\t\tthis.setState(currentState);\n\t\treturn undefined;\n\t};\n\n\tmessageUpdate = (newMessage) => {\n\t\tconst currentState = this.state;\n\t\tcurrentState.message.push(newMessage);\n\t\tif (currentState.message.length > 12) {\n\t\t\tcurrentState.message.shift();\n\t\t}\n\t\tthis.setState(currentState);\n\t};\n\n\trender() {\n\t\tconst board = (entrantNumber, boardHit) => (\n\t\t\t<Board\n\t\t\t\tentrantNumber={entrantNumber}\n\t\t\t\tplaceShip={this.placeShip}\n\t\t\t\tcells={this.state.participants[entrantNumber].board}\n\t\t\t\tboardHit={boardHit}\n\t\t\t\tonShipPlacement={this.onShipPlacement}\n\t\t\t/>\n\t\t);\n\n\t\tconst ship = (entrantNumber, shipNumber) => (\n\t\t\t<Ship\n\t\t\t\tentrant={entrantNumber}\n\t\t\t\tshipNumber={shipNumber}\n\t\t\t\ttitle={this.state.participants[entrantNumber].ships[shipNumber].name}\n\t\t\t\torientation={this.state.orientation}\n\t\t\t\tboard={this.state.participants[entrantNumber].board}\n\t\t\t\tonBoard={this.state.participants[entrantNumber].ships[shipNumber].onBoard}\n\t\t\t\tdraggable={\n\t\t\t\t\tentrantNumber\n\t\t\t\t\t\t? false\n\t\t\t\t\t\t: !this.state.participants[entrantNumber].ships[shipNumber].onBoard\n\t\t\t\t}\n\t\t\t\thits={this.state.participants[entrantNumber].ships[shipNumber]}\n\t\t\t\tsunk={\n\t\t\t\t\tthis.state.participants[entrantNumber].ships[shipNumber].parts.some(\n\t\t\t\t\t\t(part) => part === false\n\t\t\t\t\t)\n\t\t\t\t\t\t? false\n\t\t\t\t\t\t: true\n\t\t\t\t}\n\t\t\t\tonShipHit={this.onShipHit}\n\t\t\t/>\n\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"boards\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2 className=\"board-header\">\n\t\t\t\t\t\t\t{this.state.gamestart ? \"Your board\" : \"Set up your board\"}\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t{board(0, null)}\n\t\t\t\t\t\t<div className=\"entrant-pieces\">\n\t\t\t\t\t\t\t{ship(0, 0)}\n\t\t\t\t\t\t\t{ship(0, 1)}\n\t\t\t\t\t\t\t{ship(0, 2)}\n\t\t\t\t\t\t\t{ship(0, 3)}\n\t\t\t\t\t\t\t{ship(0, 4)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2 className=\"board-header\">Opponent's board</h2>\n\t\t\t\t\t\t{board(1, this.state.gamestart ? this.playerTurnEnd : null)}\n\t\t\t\t\t\t<div className=\"entrant-pieces\">\n\t\t\t\t\t\t\t{ship(1, 0)}\n\t\t\t\t\t\t\t{ship(1, 1)}\n\t\t\t\t\t\t\t{ship(1, 2)}\n\t\t\t\t\t\t\t{ship(1, 3)}\n\t\t\t\t\t\t\t{ship(1, 4)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"parent-announcements\">\n\t\t\t\t\t\t<div className=\"commands\">\n\t\t\t\t\t\t\t<button className=\"randomize\" onClick={this.randomize}>\n\t\t\t\t\t\t\t\tRandomize\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"orient\" onClick={this.changeOrientation}>\n\t\t\t\t\t\t\t\tOrientation\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className=\"reset\" onClick={() => this.reset(-1)}>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Announcements message={this.state.message} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}